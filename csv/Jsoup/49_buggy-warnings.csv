"Warning Type","Code","Warning"
"Bad practice Warning","CN","org.jsoup.select.Elements.clone() does not call super.clone()"
"Bad practice Warning","DMI","Random object created and used only once in org.jsoup.helper.DataUtil.mimeBoundary()"
"Dodgy code Warning","EI","org.jsoup.helper.HttpConnection$Request.data() may expose internal representation by returning HttpConnection$Request.data"
"Dodgy code Warning","EI","org.jsoup.helper.HttpConnection$Request.proxy() may expose internal representation by returning HttpConnection$Request.proxy"
"Dodgy code Warning","EI","org.jsoup.nodes.Element.parent() may expose internal representation by returning Node.parentNode"
"Dodgy code Warning","EI","org.jsoup.nodes.Entities$EscapeMode.getMap() may expose internal representation by returning Entities$EscapeMode.map"
"Dodgy code Warning","EI","org.jsoup.nodes.FormElement.elements() may expose internal representation by returning FormElement.elements"
"Dodgy code Warning","EI","org.jsoup.nodes.Node.attributes() may expose internal representation by returning Node.attributes"
"Dodgy code Warning","EI","org.jsoup.nodes.Node.parent() may expose internal representation by returning Node.parentNode"
"Dodgy code Warning","EI","org.jsoup.nodes.Node.parentNode() may expose internal representation by returning Node.parentNode"
"Dodgy code Warning","EI","org.jsoup.parser.Parser.getErrors() may expose internal representation by returning Parser.errors"
"Dodgy code Warning","EI2","org.jsoup.helper.HttpConnection$Request.proxy(Proxy) may expose internal representation by storing an externally mutable object into HttpConnection$Request.proxy"
"Dodgy code Warning","EI2","new org.jsoup.helper.W3CDom$W3CBuilder(W3CDom, Document) may expose internal representation by storing an externally mutable object into W3CDom$W3CBuilder.doc"
"Dodgy code Warning","MS","org.jsoup.parser.HtmlTreeBuilder.TagsSearchInScope should be package protected"
"Malicious code vulnerability Warning","SIC","Should org.jsoup.examples.HtmlToPlainText$FormattingVisitor be a _static_ inner class?"
"Malicious code vulnerability Warning","SIC","Should org.jsoup.helper.W3CDom$W3CBuilder be a _static_ inner class?"
"Malicious code vulnerability Warning","WMI","org.jsoup.safety.Whitelist.removeAttributes(String, String[]) makes inefficient use of keySet iterator instead of entrySet iterator"
"Performance Warning","DB","org.jsoup.parser.HtmlTreeBuilder.parseFragment(String, Element, String, ParseErrorList) uses the same code for two branches"
"Performance Warning","DLS","Dead store to meta in org.jsoup.parser.HtmlTreeBuilderState$4.process(Token, HtmlTreeBuilder)"
"Performance Warning","Eq","org.jsoup.nodes.Document doesn't override Element.equals(Object)"
"Performance Warning","Eq","org.jsoup.nodes.FormElement doesn't override Element.equals(Object)"
"Performance Warning","RV","Return value of Element.appendElement(String) ignored, is this OK in org.jsoup.nodes.Document.createShell(String)"
"Performance Warning","RV","Return value of Element.appendElement(String) ignored, is this OK in org.jsoup.nodes.Document.normalise()"
"Performance Warning","RV","Return value of Element.prependElement(String) ignored, is this OK in org.jsoup.nodes.Document.normalise()"
"Performance Warning","SF","Switch statement found in org.jsoup.parser.TokeniserState$10.read(Tokeniser, CharacterReader) where default case is missing"
"Performance Warning","SF","Switch statement found in org.jsoup.parser.TokeniserState$35.read(Tokeniser, CharacterReader) where default case is missing"
"Performance Warning","SF","Switch statement found in org.jsoup.parser.TokeniserState$38.read(Tokeniser, CharacterReader) where default case is missing"
"Performance Warning","SF","Switch statement found in org.jsoup.parser.TokeniserState$39.read(Tokeniser, CharacterReader) where default case is missing"
"Performance Warning","SF","Switch statement found in org.jsoup.parser.TokeniserState$40.read(Tokeniser, CharacterReader) where default case is missing"
"Performance Warning","SF","Switch statement found in org.jsoup.parser.TokeniserState$51.read(Tokeniser, CharacterReader) where one case falls through to the next case"
